name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: terrafusion_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start core services
      run: |
        npm run start:api-gateway &
        npm run start:user-service &
        npm run start:property-service &
        npm run start:form-service &
        npm run start:report-service &
        npm run start:analysis-service &
        npm run start:apollo-gateway &
        sleep 10 # give services time to start
    
    - name: Run smoke tests
      run: bash smoke-test.sh

  matrix-build:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        app: [
          # Core services
          'web-client', 
          'api-gateway', 
          'user-service', 
          'property-service', 
          'form-service', 
          'analysis-service', 
          'report-service', 
          'apollo-gateway',
          # Integrated applications
          'terrafusionsync',
          'terrafusionpro',
          'terraflow',
          'terraminer',
          'terraagent',
          'terraf',
          'terralegislativepulsepub',
          'bcbscostapp',
          'bcbsgeoassessmentpro',
          'bcbslevy',
          'bcbswebhub',
          'bcbsdataengine',
          'bcbspacsmapping',
          'geoassessmentpro',
          'bsbcmaster',
          'bsincomevaluation',
          'terrafusionmockup'
        ]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint:${{ matrix.app }}
    
    - name: Test
      run: npm run test:${{ matrix.app }}
    
    - name: Build
      run: npm run build:${{ matrix.app }}

  deploy:
    needs: [smoke-tests, matrix-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build all packages
      run: npm run build
    
    - name: Setup Kubernetes CLI
      uses: azure/setup-kubectl@v3
    
    - name: Connect to Kubernetes cluster
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Deploy to staging using blue/green strategy
      run: node scripts/deploy.js --env=staging --strategy=blue-green
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        KUBE_NAMESPACE: terrafusion-staging
        
    - name: Run smoke tests on staging
      run: |
        # Wait for services to be ready
        sleep 30
        # Run smoke tests against staging environment
        STAGING_URL=${{ secrets.STAGING_URL }} bash smoke-test.sh
        
    - name: Deploy to production using blue/green strategy
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: node scripts/deploy.js --env=production --strategy=blue-green
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        KUBE_NAMESPACE: terrafusion-production
        
    - name: Notify on success
      if: success()
      run: |
        curl -X POST -H "Content-Type: application/json" \
          -d '{"text":"âœ… Successfully deployed TerraFusionPro platform to production."}' \
          ${{ secrets.SLACK_WEBHOOK_URL || 'https://hooks.slack.com/services/placeholder' }}